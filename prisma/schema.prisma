generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createAt      DateTime  @default(now()) @map("create_at")
  updateAt      DateTime  @default(now()) @updatedAt @map("update_at")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resident {
  id          String   @id @default(cuid())
  nationalId  String   @unique @map("nationalId")
  phoneNumber String   @map("phoneNumber")
  name        String   @map("name")
  gender      String   @map("gender")
  vehicle     String   @map("vehicle")
  createAt    DateTime @default(now()) @map("create_at")
  updateAt    DateTime @default(now()) @updatedAt @map("update_at")
  addressId   String   @unique
  address     Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model Address {
  id               String      @id @default(cuid())
  apartmentNo      Int
  permanentAddress String
  currentAddress   String
  isStaying        Boolean
  apartment        Apartment   @relation(fields: [apartmentNo], references: [apartmentNo])
  dateRanges       DateRange[]
  resident         Resident?
}

model DateRange {
  id        String   @id @default(cuid())
  startDate DateTime @default(now()) @map("start_date")
  endDate   DateTime @map("end_date")
  type      String   @map("type")
  addressId String
  address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model Apartment {
  id          Int       @id @default(autoincrement())
  apartmentNo Int       @unique
  size        Int
  addresses   Address[]
  fees        Fee[]
}

model Fee {
  id               String    @id @default(cuid())
  apartmentSizeFee Int       @map("apartmentSizeFee")
  internetFee      Int       @map("internetFee")
  electricityFee   Int       @map("electricityFee")
  waterFee         Int       @map("waterFee")
  contributionFee  Int?      @map("contributionFee")
  vehicleFee       Int       @map("vehicleFee")
  notes            String?   @map("notes")
  totalAmount      Float     @map("amount")
  dueDate          DateTime  @map("dueDate")
  isPaid           Boolean   @default(false) @map("isPaid")
  apartmentNo      Int
  createAt         DateTime  @default(now()) @map("create_at")
  updateAt         DateTime  @default(now()) @updatedAt @map("update_at")
  apartment        Apartment @relation(fields: [apartmentNo], references: [apartmentNo], onDelete: Cascade)
}
